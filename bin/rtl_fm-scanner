#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::IOLoop;
use Mojo::Util qw(dumper);
use Mojo::Log;
use Mojo::Pg;
#use Mojo::Pg::PubSub;
use Mojo::JSON qw(decode_json encode_json);

use FindBin qw($Bin);
use lib "$Bin/../lib";

use FileWatch;

use Data::Dumper;

use constant NO_PASS     => 0;
use constant MANUAL_PASS => 1;
use constant AUTO_PASS   => 2;

my $config = plugin Config => { file => "$Bin/../config/scanner.conf" };
app->defaults->{config} = $config;

app->log( Mojo::Log->new( path => "$Bin/../log/rtl_fm-scanner.log" ) );

# Yes, this is really bad and one of the reasons this thing will not work with forking server
my $watcher = Inotifier::Model::FileWatch->new(app);

app->plugin('RenderFile');
app->plugin('CORS'); # lets the client get around same origin policy restriction

app->secrets( ['Specfying a secret to make the reminder go away.'] );

get '/self' => sub {
    my $c = shift;

    $c->render( json => { function => 'Scanner' } );

# ugh this is nasty but I need to store it here because it does not work in the helper
    app->defaults->{audio_url} = $c->url_for('audio')->to_abs;
};

get '/script' => { template => 'script' };

get '/audio' => sub {
    my $c    = shift;
    my $file = $c->param('file');

    # Open file in browser(do not show save dialog)
    $c->render_file(
#        'filepath'            => "/home/pub/ham2mon/apps/wav/$file",
        'filepath'            => "/home/pub/ham2mon/apps/wav_trimmed/$file",
        'content_disposition' => 'inline'
    );
};

get '/freqs' => sub {
    my $c = shift;

    my $freqs = $watcher->get_freqs( $c->param('mode') );
    foreach (@$freqs) { $_->{url} = app->defaults->{audio_url} };  # more hack

    $c->render( json => $freqs );
};

websocket '/output' => sub {
    my $c = shift;

    $c->inactivity_timeout(60);

    my $client =
      $c->tx->remote_address . $c->tx->remote_port;    # unique identifier

    $c->send( { json => app->config_msg } );

#    my $watcher = Inotifier::Model::FileWatch->new($c->app);

    $c->{cb}{$client} = $watcher->watch( $client, 
        sub {
            my $msg = shift;
            $msg->{url} = $c->app->defaults->{audio_url};
            $c = $c->send( { json => $msg } );
            $c->app->log->debug("item to let client know about (watcher): $msg->{type}");
        }
    );

    #my $cb = $c->pubsub->listen(msg => sub {
#	my ($pubsub, $payload) = @_;
#	my $msg = decode_json($payload);
 #       $c = $c->send( { json => $msg } );
  #      app->log->debug("item to let client know about (pubsub): $msg->{type}");
   # });

    $c->on(
        json => sub {
            my ( $ws, $hash ) = @_;

            if ( $hash->{type} eq 'ping' ) {
                app->log->debug('client pinged me');
            }
            elsif ( $hash->{type} eq 'set_freq' ) {
                $watcher->set_freq( $hash );
                $c = $c->send( { json => {type => 'update'} } );
            }
            elsif ( $hash->{type} eq 'set_mode' ) {
                $watcher->set_mode( $hash );
                $c->send( { json => app->config_msg } );
            }
            elsif ( $hash->{type} eq 'clear_auto_pass' ) {
                app->log->debug('about to clear auto pass');
                app->clear_auto_pass;
                $c->start_rtlfm;
            }
            elsif ( $hash->{type} eq 'set_squelch' ) {
                $config->{squelch} = $hash->{squelch};
                $c->start_rtlfm
                  ;    # need to start rtl_fm for changes to take effect

                $c->pubsub->notify(msg => encode_json( app->config_msg ));
            }
        }
    );

    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
	    #$c->pubsub->unlisten( msg => $cb );
	    $watcher->unwatch($client);
            delete $c->{cb}{$client};
            $c->app->log->debug("WebSocket closed with status $code.");
        }
    );
};

helper config_msg => sub {
    my $self = shift;

    my $banks = $watcher->get_banks;
    $config->{existing_banks} = $banks;

    #push @{$config->{banks}}, 'TBD';   # overlay things "recently" found in search

    return { type => 'config', %{$config} };
};

helper pg => sub {
    state $pg = Mojo::Pg->new('postgresql://script@/cart')
      or app->log->error('Could not connect to database');
};

#helper watcher => sub {
#    state $watcher = Inotifier::Model::FileWatch->new(app);
#};

helper clear_auto_pass => sub {
    my $self = shift;

    app->log->info( sprintf('clearing auto pass for all frequencies') );

    my $db = $self->pg->db;

    foreach my $bank ( @{ $config->{banks} } ) {
        $db->query( 'UPDATE freqs SET pass=0 WHERE pass=2 AND bank=?', $bank );
    }

    app->load_freqs;

    $self->pubsub->notify(msg => encode_json( {type => 'update'} ));
};

app->start;

__DATA__

@@ script.html.ep
console.log("Scanner code running");

var scan_ws = new WebSocket('<%= url_for('output')->to_abs %>');

setInterval(function () {
        scan_ws.send(JSON.stringify( { type: "ping" } ));
        }, 45000
);

var mode = "Scan History";
var backlog = [];
var scan_config;

scan_ws.onmessage = function (event) {
    var msg = $.parseJSON(event.data);

    switch (msg.type) {
        case 'audio':
            msg.extra = '/ ' + msg.freq + ' (' + msg.duration.toFixed(1) + ')';
            enqueue(msg);
            //scanner_page();
            break;
        case 'update':
            scanner_page();
            break;
        case 'config':
            scan_config = msg;
            break;
    }
};

scanner_page = function () {

    // TODO: this is pretty convoluted and better way should be found
    var active_id = $("#switcher").tabs("option", "active");
    active = $("#switcher ul>li a").eq(active_id).attr('href');

    if (active != '#scanner') { return }

    console.log("Populating scanner page");

    if (mode == 'Scan History') {
        render_page(backlog);
    } else {
        $.getJSON( '<%= url_for('freqs')->to_abs %>' + '/?mode=' + mode )
            .done( function (json) { render_page( json ) } );
    }

};

render_page = function(data) {
   	    $('#scanner').empty().append('<ul data-role="listview" id="frequencies"></ol>');
	    $.each( data, function(i, detail) {

                var info = detail.freq.toString();
                if (detail.duration) {
                    info += ' (' + detail.duration.toFixed(1) + ')';
                }
                //if (detail.count) { info += ' / ' + detail.count + ' hits' }
                switch (detail.pass) {
                    case 1:
                        info += ' / Manual Pass';
                        break;
                    case 2:
                        info += ' / Auto Pass';
                        break;
                }
                var contents = '<h2>' + detail.label + '</h2><p>' + 
                               info + '</p>';

//		$('<li id=' + detail.xmit_key + '>')
		$('<li>')
		    .append(
		  	$('<a/>', {
			    html: contents,
			    href: "#" + detail.xmit_key,
                            id: detail.xmit_key
			})
			).appendTo("#frequencies");

            });  // end .each

            // There may be another way but this appears to work:
            // http://www.gajotres.net/uncaught-error-cannot-call-methods-on-prior-to-initialization-attempted-to-call-method-refresh/
            $('#frequencies').listview().listview('refresh');

            $( '#frequencies li a' ).on( "taphold", function( event ) {
//            $( '#frequencies' ).on('click', 'li', function() {
                var id = $( this ).attr('id');

                var entry = $.grep(data, function(obj) {
                    return id == obj.xmit_key;
                });

                frequency_config(entry[0]);
            });

//        });  // end .done


};

frequency_config = function(entry) {

    var choices = [ 'none', 'manual', 'auto' ];

    var config = $("<div/>").popup({
        theme : "a",
        overlayTheme : "a",
        transition : "pop"
    }).on("popupafterclose", function() {
        //remove the popup when closing
        $(this).remove();
    });

    $("<h3/>", {
        text : entry.freq
    }).appendTo(config);

    $('<h3/>').append(
        $('<input/>', {
        type : 'text',
        name : 'label',
        id : 'label',
        value : entry.label,
    })
    ).appendTo(config);

    $('<label>', {
        for: 'bank',
        text : 'Bank',
        class: 'select'
    }).appendTo(config);

    $('<select name="bank" id="banks"></select>').appendTo(config);;

    $.each( scan_config.existing_banks, function(name, detail) {
       $('<option/>', {
                        text: detail,
                        value: detail
                    })
                    .appendTo("#banks");
    });

    //create a form for the pop up
    var form = $('<form/>');

    var radio_btns = $('<fieldset/>', {
            'data-role': 'controlgroup',
            'data-type': 'horizontal'
        });

    $('<legend/>', { text: 'Pass' }).appendTo(radio_btns);

    $.each( choices, function( index, choice ) {
        $('<input/>', {
            type : 'radio',
            name : 'pass-choice',
            id : 'pass-choice-' + choice,
            value : index,
        }).appendTo(radio_btns);

        $('<label>', {
            for: 'pass-choice-' + choice,
            text: choice
        }).appendTo(radio_btns);
    });

   radio_btns.appendTo(form).appendTo(config);

   //Create a submit button(fake)
    $("<a>", {
        text : "OK"
    }).buttonMarkup({
        inline : true,
        icon : "check"
    }).bind("click", function() {
        config.popup("close");

        var changes = {};

        var new_pass = $('input[name=pass-choice]:checked').val();
        if ( entry.pass != new_pass ) {
            changes.pass = new_pass;
        }
        var new_label = $('input[name=label]').val();
        if ( entry.label != new_label ) {
            changes.label = new_label;
        }
        var new_bank = $('#banks').val();
        if ( entry.bank != new_bank ) {
            changes.bank = new_bank;
        }

        if (!jQuery.isEmptyObject(changes) ) {
            changes.freq_key = entry.freq_key;
            changes.type = 'set_freq';

            scan_ws.send(JSON.stringify( changes ));

            // change the backlog list
	    $.each( backlog, function(i, detail) {
                if (detail.freq_key == changes.freq_key) {
                    if (changes.pass)  { detail.pass = Number(changes.pass) }
                    if (changes.label) { detail.label = changes.label }
                    if (changes.bank)  { detail.bank = changes.bank }
                    console.log(detail);
                }
            });
        }

    }).appendTo(config);

    //create a cancel button
    $("<a>", {
        text : "Cancel",
    }).buttonMarkup({
        inline : true,
        icon : "back"
    }).bind('click', function() {
        config.popup('close');
    }).appendTo(config);

   //Create a play button
    $("<a>", {
        text : "Enqueue"
    }).buttonMarkup({
        inline : true,
        icon : "check"
    }).bind("click", function() {
        enqueue(entry);
        //config.popup('close');
    }).appendTo(config);

    $('#pass-choice-'+choices[entry.pass]).attr('checked', true);
    $('#banks').val(entry.bank);

    config.popup("open").trigger("create");
//    alert(entry);

    $('#pass-choice-auto').checkboxradio('disable');
};

scanner_config = function() {

    // approach from: http://stackoverflow.com/questions/16015810/jquery-mobile-best-way-to-create-pop-up-and-content-dynamically

    console.log("squelch: " + scan_config.squelch);
    var $config = $("<div/>").popup({
        theme : "a",
        overlyaTheme : "a",
        transition : "pop"
    }).on("popupafterclose", function() {
        //remove the popup when closing
        $(this).remove();
    });

    $("<h2/>", {
        text : "Scanner Configuration"
    }).appendTo($config);

    //create a form for the pop up
//    $('<form>').append(
//        $('<label>', {
//            for: 'squelch',
//            text: 'Squelch'
//    }))
//    .append($('<input/>', {
//        type : 'range',
//        name : 'squelch',
//        id : 'squelch',
//        value : scan_config.squelch,
//        min : '0',
//        max : '100'
//    }))
//    .append($('<label>', {
//        for : 'clear_pass',
//        text : 'Clear Auto Pass',
//    }))
//    .append($('<input/>', {
//       type : 'checkbox',
//        name : 'clear_pass',
//        id   : 'clear_pass'
//    }))

    $('<form>').append(
        $('<label>', {
            for: 'base_freq',
            text: 'Center (Mhz)'
    }))
    .append($('<input/>', {
        name : 'base_freq',
        id : 'base_freq',
        value : scan_config.base_freq/1e6,
        factor: 1e6
    }))
    .append(
        $('<label>', {
            for: 'range',
            text: 'Range (Mhz)'
    }))
    .append($('<input/>', {
        name : 'range',
        id : 'range',
        value : scan_config.range/1e6,
        factor: 1e6
    }))
    .append(
        $('<label>', {
            for: 'rate',
            text: 'Rate (Sec)'
    }))
    .append($('<input/>', {
        name : 'rate',
        id : 'rate',
        value : scan_config.rate,
        factor: 1
    }))
    .append($('<label>', {
        for: 'mode',
        text : 'Mode',
        class: 'select'
    }))

    .append($('<select name="mode" id="mode"></select>'))

    .appendTo($config);

    var modes = [ "Scan History", "Passed Frequencies" ];
    $.each( modes, function(name, detail) {
       $('<option/>', {
                        text: detail,
                        value: detail
                    })
                    .appendTo("#mode");
    });

   //Create a submit button(fake)
    $("<a>", {
        text : "OK"
    }).buttonMarkup({
        inline : true,
        icon : "check"
    }).bind("click", function() {
        $config.popup("close");
        check_for_changes();
        //that.subscribeToAsset(callback);
    }).appendTo($config);

    //create a back button
    $("<a>", {
        text : "Cancel",
    }).buttonMarkup({
        inline : true,
        icon : "back"
    }).bind('click', function() {
        $config.popup('close');
    }).appendTo($config);

    $('#mode').val(mode);

    $config.popup("open").trigger("create");
};

check_for_changes = function() {

//    if ( $('#squelch').val() != scan_config.squelch ) {
//        scan_ws.send(JSON.stringify( { type: "set_squelch", squelch: $('#squelch').val() } ));
//    }

//    if($('#clear_pass').prop('checked')) {
//        scan_ws.send(JSON.stringify( { type: "clear_auto_pass" } ));
//    }

    var changes = {};
    $.each( ['base_freq', 'range', 'rate'], function(i, detail) {
        new_val = $('#' + detail).val() * $('#' + detail).attr('factor');
        if ( new_val != scan_config[detail] ) {
            //console.log(scan_config[detail]);
            changes[detail] = new_val;
        }
    });

    if (!jQuery.isEmptyObject(changes) ) {
        changes.type = 'set_mode';

        scan_ws.send(JSON.stringify( changes ));
    }

    if ( $('#mode').val() != mode ) {
        mode = $('#mode').val();
        scanner_page();
    }
};

scanner_afterclip = function(msg) {

    if ( backlog.unshift(msg) > 20) { backlog.pop() }
    scanner_page();

};
